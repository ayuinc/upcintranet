<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

 /**
 * mithra62 - Securit:ee
 *
 * @package		mithra62:Securitee
 * @author		Eric Lamb
 * @copyright	Copyright (c) 2011, mithra62, Eric Lamb.
 * @link		http://mithra62.com/projects/view/securit-ee/
 * @version		1.2.1
 * @filesource 	./system/expressionengine/third_party/securitee/
 */
 
 /**
 * Securit:ee - Exploit Scanner library
 *
 * Library class for the Exploit Scanner 
 *
 * @package 	mithra62:Securitee
 * @author		Eric Lamb
 * @filesource 	./system/expressionengine/third_party/securitee/libraries/Exploit_scanner.php
 */
class Exploit_scanner
{
	/**
	 * Ignore File Extensions
	 * An array of all file extensions to give a pass to. 
	 * @var array
	 */
	private $ignore_file_ext = array('css');
	
	/**
	 * Exploit Patterns
	 * All the pattern regex used for detecting exploits
	 * @var array
	 */
	public $patterns = array(
		'output_restricted_vars' => '/(echo|print|<\?=).+(\$GLOBALS|\$_SERVER|\$_GET|\$_REQUEST|\$_POST)/siU',
		'shellbot' => '/ShellBOT/i',
		'os_peak' => '/uname -a/i',
		'serd_hack' => '/YW55cmVzdWx0cy5uZXQ=/i',
		'eval_check' => '/eval\s*\(/i',
		'yahg' => '/\$_COOKIE\[\'yahg\'\]/i',
		'base64' => '/base64_decode\s*\(/i',
		'gumblar' => '/<script>\/\*(GNU GPL|LGPL)\*\/ try\{window.onload.+catch\(e\) \{\}<\/script>/siU',
		'rot13' => '/str_rot13/i',
		'uudecode' => '/uudecode/i',
		'iframe' => '/<iframe/i',
		'js_string' => '/String\.fromCharCode/i',
		'e_preg_replace' => '/preg_replace\s*\(\s*(["\'])(.).*(?<!\\\\)(?>\\\\\\\\)*\\2([a-z]|\\\x[0-9]{2})*(e|\\\x65)([a-z]|\\\x[0-9]{2})*\\1/si',
		'visibility_hidden' => '/visibility: ?hidden/i',
		'visibility_none' => '/display: ?none/i'
	);
	
	/**
	 * Found Exploits
	 * An array of the exploits found
	 * @var array
	 */
	public $found_exploits = array();
	
	public function __construct()
	{
		$this->EE =& get_instance();
		$this->EE->load->helper('directory');
		$this->settings = $this->EE->securitee_lib->settings;
		
		$this->settings['exploit_scan_path'] = 'C:/ProjectFiles/mithra62/ee/';
	}	
	
	public function run()
	{
		$this->file_system($this->settings['exploit_scan_path']);
		print_r($this->found_exploits);
	}
	
	public function file_system($directory)
	{
		$dir_info = get_dir_file_info($directory, FALSE);
		foreach($dir_info AS $file)
		{
			if(is_readable($file['server_path']))
			{
				$parts = explode('.', $file['server_path']);
				$ext = end($parts);
				if(in_array($ext, $this->ignore_file_ext))
				{
					continue;
				}
				
				$exclude_file = FALSE;
				foreach($this->settings['exploit_scan_exclude_paths'] AS $exclude)
				{
					if(is_dir($exclude))
					{
						$length = strlen($exclude);
						$compare = substr($file['server_path'], 0, $length);
						if($compare == $exclude)
						{
							$exclude_file = TRUE;
							break;
						}

					}
					else
					{
					
						if(isset($file['name']) && $file['name'] == $exclude)
						{
							$exclude_file = TRUE;
							break;
						}

					}
				}

				if($exclude_file)
				{
					continue;
				}
				
				$contents = file($file['server_path']);
				foreach ( $contents as $n => $line ) 
				{
					foreach ( $this->patterns as $key => $pattern ) 
					{
						$test = preg_replace_callback( $pattern, array( &$this, 'replace' ), $line );
						if ( $line !== $test )
						{
							$data = array(
								'loc' => $file['server_path'],
								'file_data' => $file,
								'line' => trim(htmlspecialchars( $test )),
								'line_no' => $n+1,
								'desc' => $key
							);
							$this->add_result($data);
						}
					}
				}				
			}
		}
	}
	
	public function add_result($data, $type = 'file')
	{
		$this->found_exploits[$type][] = $data;
	}
	
	function replace( $matches ) {
		return '$#$#' . $matches[0] . '#$#$';
	}	
	
	public function entries()
	{
		
	}
}