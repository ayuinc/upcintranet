{"version":3,"file":"mcp.min.js","sources":["..\\..\\..\\..\\source\\js\\mcp\\batch_actions.js"],"names":["global","$","initMCP","cimcp","find","select2","click","startAction","imageFilters","bind","reloadImages","trigger","imageActionToggler","toggleAction","imageTransferToggler","toggleTransferType","imageProgressHolder","delegate","showActionError","e","type","target","nodeName","params","serializeArray","push","name","value","ChannelImages","site_id","EE","XID","ajax","url","AJAX_URL","dataType","data","crossDomain","success","rdata","imageIds","ids","imageIdsCount","length","fieldIds","field_ids","html","getImageSizes","error","empty","join","fields","i","Templates","mcp_regen_fieldsizes","imageAction","val","hide","show","tr","actionTransferParams","actionRegenParams","done","append","execAction","updateActionRow","index","id","loading","postAction","xhr","percent","ajax_method","entry","channel","field","image","ajax_error","responseText","retry_count","retry","setTimeout","imageIdsDone","css","obj","action_done","mcp_batch_action_row","closest","contents","window","jQuery"],"mappings":"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","sourcesContent":[";(function(global, $){\n    //es5 strict mode\n    \"use strict\";\n\n    var ChannelImages = global.ChannelImages = global.ChannelImages || {};\n\n    // internal, MCP\n    var cimcp = $('#cimcp');\n\n    if (cimcp.length > 0) {\n        var imageIds = [];\n        var imageIdsDone = [];\n        var imageIdsCount = 0;\n        var fieldIds = [];\n        var imageAction;\n        var actionTransferParams;\n        var actionRegenParams;\n        var imageFilters = cimcp.find('.image-filters');\n        var imageActionToggler = cimcp.find('.action-toggler');\n        var imageTransferToggler = cimcp.find('.transfer-toggle');\n        var imageProgressHolder = cimcp.find('.progress_holder');\n        initMCP();\n    }\n\n    // ----------------------------------------------------------------------\n\n    function initMCP() {\n        cimcp.find('.select2').select2();\n        cimcp.find('.start_actions').click(startAction);\n        imageFilters.bind('keyup change', reloadImages).trigger('change');\n        imageActionToggler.bind('click', toggleAction).find('input:checked').trigger('click');\n        imageTransferToggler.bind('click', toggleTransferType).find('input:checked').trigger('click');\n        imageProgressHolder.delegate('.show_error', 'click', showActionError);\n    }\n\n    // ----------------------------------------------------------------------\n\n    function reloadImages(e) {\n        if (e.type == 'change' && e.target.nodeName == 'INPUT') return;\n\n        var params = imageFilters.find(':input').serializeArray();\n        params.push({name:'ajax_method', value:'load_batch_images'});\n        params.push({name:'site_id', value:ChannelImages.site_id});\n        params.push({name:'XID', value:EE.XID});\n\n        $.ajax({url:ChannelImages.AJAX_URL, type:'POST', dataType:'json', data:params,\n            crossDomain: true,\n            success: function(rdata){\n                imageIds = rdata.ids;\n                imageIdsCount = imageIds.length;\n                fieldIds = rdata.field_ids;\n\n                cimcp.find('.total_count').html(imageIdsCount);\n\n                getImageSizes();\n            },\n            error: function(){\n\n            }\n\n        });\n    }\n\n    // ----------------------------------------------------------------------\n\n    function getImageSizes() {\n        cimcp.find('.action-regen .image_sizes').empty();\n\n        var params = [];\n        params.push({name:'ajax_method', value:'get_image_sizes'});\n        params.push({name:'field_ids', value:fieldIds.join(',')});\n        params.push({name:'XID', value:EE.XID});\n\n        $.ajax({url:ChannelImages.AJAX_URL, type:'POST', dataType:'json', data:params,\n            success: function(rdata){\n                if (!rdata.fields) return;\n\n                var html = '';\n\n                for (var i = 0; i < rdata.fields.length; i++) {\n                    html += ChannelImages.Templates.mcp_regen_fieldsizes(rdata.fields[i]);\n                }\n\n                cimcp.find('.action-regen .image_sizes').html(html);\n            },\n            error: function(){\n\n            }\n\n        });\n    }\n\n    // ----------------------------------------------------------------------\n\n    function toggleAction(e) {\n        imageAction = imageActionToggler.find('input:checked').val();\n\n        cimcp.find('table.actions').hide();\n        cimcp.find('table.action-'+imageAction).show();\n    }\n\n    // ----------------------------------------------------------------------\n\n    function toggleTransferType(e) {\n        var value = imageTransferToggler.find('input:checked').val();\n\n        cimcp.find('tbody.options').hide();\n        cimcp.find('tbody.option-'+value).show();\n    }\n\n    // ----------------------------------------------------------------------\n\n    function startAction(e, tr) {\n\n        if (!actionTransferParams && imageAction == 'transfer') {\n            actionTransferParams = cimcp.find('.action-transfer').find(':input').serializeArray();\n        } else {\n            actionRegenParams = cimcp.find('.action-regen').find(':input').serializeArray();\n        }\n\n        for (var i = 0; i < imageIds.length; i++) {\n            if (!imageIds[i]) continue;\n\n            if (!imageIds[i].done) {\n\n                if (!tr) {\n                    tr = imageProgressHolder.find('.current-actions').append('<tr></tr>').find('tr:last');\n                }\n\n                execAction(i, tr);\n                return;\n            }\n        }\n\n        // If we arrived here, that means we are done!\n        updateActionRow(null, tr, true);\n    }\n\n    // ----------------------------------------------------------------------\n\n    function execAction(index, tr) {\n        var params = [];\n\n        if (imageAction == 'transfer') {\n            params = cimcp.find('.action-transfer').find(':input').serializeArray();\n        } else {\n            params = cimcp.find('.action-regen').find(':input').serializeArray();\n        }\n\n        params.push({name:'id', value:imageIds[index].id});\n        params.push({name:'action', value:imageAction});\n        params.push({name:'ajax_method', value:'exec_batch'});\n        params.push({name:'XID', value:EE.XID});\n\n        imageIds[index].done = true;\n        imageIds[index].loading = true;\n\n        updateActionRow(index, tr);\n\n        $.ajax({url:ChannelImages.AJAX_URL+'&image_id='+imageIds[index].id, type:'POST', dataType:'json', data:params,\n            success: function(rdata){\n                postAction(index, tr);\n            },\n            error: function(xhr){\n                postAction(index, tr, xhr);\n            }\n        });\n    }\n\n    // ----------------------------------------------------------------------\n\n    function postAction(index, tr, xhr) {\n        var percent;\n\n        if (!xhr) {\n            imageIdsDone.push(imageIds[index].id);\n            percent = (100/imageIdsCount) * imageIdsDone.length;\n            imageProgressHolder.find('.progress').css('width', percent+'%').find('.total_done').html(imageIdsDone.length);\n            startAction(null, tr);\n\n            delete imageIds[index];\n            return;\n        }\n\n\n\n        $.ajax({url:ChannelImages.AJAX_URL, type:'POST', dataType:'json', data:{ajax_method: 'get_image_details', id:imageIds[index].id, XID: EE.XID},\n            success: function(rdata){\n                imageIds[index].entry = rdata.entry;\n                imageIds[index].channel = rdata.channel;\n                imageIds[index].field = rdata.field;\n                imageIds[index].image = rdata.image;\n                imageIds[index].ajax_error = xhr.responseText;\n                imageIds[index].loading = false;\n\n                if (!imageIds[index].retry_count) {\n                    imageIds[index].retry_count = 3;\n                } else {\n                    imageIds[index].retry_count--;\n                }\n\n                if (imageIds[index].retry_count) imageIds[index].retry = true;\n                else imageIds[index].retry = false;\n\n                updateActionRow(index, tr);\n\n                if (imageIds[index].retry) {\n                    setTimeout(function(){\n                        imageIds[index].ajax_error = false;\n                        execAction(index, tr);\n                    }, 3000);\n                }\n            }\n        });\n\n    }\n\n    // ----------------------------------------------------------------------\n\n    function updateActionRow(index, tr, done) {\n        var obj;\n\n        if (done) {\n            obj = {action_done: true};\n        } else {\n            obj = imageIds[index];\n        }\n\n        // Just in case\n        if (!tr) {\n            tr = imageProgressHolder.find('.current-actions').find('tr:last');\n        }\n\n        tr.html(ChannelImages.Templates.mcp_batch_action_row(obj));\n    }\n\n    // ----------------------------------------------------------------------\n\n    function showActionError(e) {\n        var error = $(e.target).closest('.action_error').find('script').html();\n        $('#ci_ajax_error').show().find('iframe').contents().find('html').html(error);\n    }\n\n    // ----------------------------------------------------------------------\n\n}(window, jQuery));"]}